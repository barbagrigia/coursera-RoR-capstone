# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.

require 'mongoid-rspec'
require 'capybara/rspec'
require_relative 'support/database_cleaners.rb'
require_relative 'support/api_helper.rb'
require_relative 'support/ui_helper.rb'


browser=:chrome
Capybara.register_driver :selenium do |app|
  if ENV['SELENIUM_REMOTE_HOST']
    # https://medium.com/@georgediaz/docker-container-for-running-browser-tests-9b234e68f83c#.l7i6yay23
    # use container's shell to find the docker ip address
    docker_ip = %x(/sbin/ip route|awk '/default/ { print $3 }').strip
    Capybara.app_host = "http://#{docker_ip}:#{ENV['APP_PORT']}"
    puts "Capybara.app_host=#{Capybara.app_host}"
    Capybara.server_host = "0.0.0.0"
    Capybara.server_port = ENV['APP_PORT']
    Capybara::Selenium::Driver.new( app, 
        :browser=>:remote, 
        :url=>"http://#{ENV['SELENIUM_REMOTE_HOST']}:4444/wd/hub",
        :desired_capabilities=>:chrome)
  elsif browser == :chrome
    if ENV['CHROMEDRIVER_BINARY_PATH']
      #set CHROMEDRIVER_BINARY_PATH=c:\Program Files\chromedriver_win32\chromedriver.exe
      Selenium::WebDriver::Chrome.driver_path=ENV['CHROMEDRIVER_BINARY_PATH']
    end
    Capybara::Selenium::Driver.new(app, :browser => :chrome)
  else 
    if ENV['FIREFOX_BINARY_PATH']
      require 'selenium/webdriver'
      #set FIREFOX_BINARY_PATH=c:\Program Files\Mozilla Firefox\firefox.exe
      Selenium::WebDriver::Firefox::Binary.path=ENV['FIREFOX_BINARY_PATH']
    end
    #http://stackoverflow.com/questions/20009266/selenium-testing-with-geolocate-firefox-keeps-turning-it-off
    profile = Selenium::WebDriver::Firefox::Profile.new
    profile["geo.prompt.testing"]=true
    profile["geo.prompt.testing.allow"]=true
    Capybara::Selenium::Driver.new(app, :browser=>:firefox, :profile=>profile)
  end
end

require 'capybara/poltergeist'
# Set the default driver 
Capybara.configure do |config|
  config.default_driver = :rack_test
  #used when :js=>true
  config.javascript_driver = :poltergeist
end
#Capybara.javascript_driver = :selenium

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new( app,
    js_errors: false,
    phantomjs_logger: StringIO.new,
#    logger: STDERR
    )
end

if ENV["COVERAGE"] == "true"
    require 'simplecov'
    SimpleCov.start do
      add_filter "/spec"
      add_filter "/config"
      add_group "foos", ["foo"]
      add_group "bars", ["bar"]
    end
end

#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.include Mongoid::Matchers, :orm => :mongoid
  config.include ApiHelper, :type=>:request
  config.include UiHelper, :type=>:feature

  config.before(:each, js: true) do
    #Capybara.page.driver.browser.manage.window.maximize
    if !ENV['SELENIUM_REMOTE_HOST'] || Capybara.javascript_driver = :poltergeist
      Capybara.page.current_window.resize_to(1050, 800)
    end
  end
  
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
